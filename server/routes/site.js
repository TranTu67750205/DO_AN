// server/routes/sites.js
const express = require("express");
const router = express.Router();
const Sitedata = require("../models/sitemodel");
const device_verifi = require("../models/devicemodel");
const ESPdata = require("../models/sensormodel");

// Helper: x√°c ƒë·ªãnh tr·∫°ng th√°i thi·∫øt b·ªã
function getDeviceStatus(lastActive) {
  const now = Date.now();
  const diff = now - new Date(lastActive).getTime();
  return diff < 60000 ? "Ho·∫°t ƒë·ªông" : "Kh√¥ng ho·∫°t ƒë·ªông";
}

//l·∫•y danh s√°ch devices 
router.get("/devices_verified", async (req, res) => {  
  try {
    const data = await device_verifi.find({ verified: true , type: 'id' }).sort({ timestamp: -1 });
    res.json(data);
  } catch (err) {
    res.status(500).json({ error: "L·ªói l·∫•y d·ªØ li·ªáu" });
  }
});

// L·∫•y danh s√°ch t·∫•t c·∫£ site k√®m device 
router.get("/load", async (req, res) => {  
  try {
    const data = await Sitedata.find().limit(10);
    res.json(data);
  } catch (err) {
    res.status(500).json({ error: "L·ªói l·∫•y d·ªØ li·ªáu" });
  }
});

// T·∫°o site m·ªõi
router.post("/add", async (req, res) => {
  const { locationName, createdBy, devices } = req.body;
  try {
    const site = new Sitedata({
      locationName,
      createdBy,
      devices,
    });

    await site.save();
    res.json({ message: "T·∫°o site th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: "L·ªói t·∫°o site" });
  }
});

const THRESHOLD_MINUTES = 1;

router.post("/status-devices", async (req, res) => {
  try {
    const { deviceIds } = req.body;
    const statuses = [];

    // L·∫•y 20 b·∫£n ghi m·ªõi nh·∫•t t·ª´ to√†n b·ªô ESPdata
    //const recentRecords = await ESPdata.find().sort({ timestamp: -1 }).limit(20);
    const now = new Date();

    for (const id of deviceIds) {
      const latestRecord = await ESPdata.findOne({ id }).sort({ timestamp: -1 });

      if (latestRecord) {
        const diffMs = now - new Date(latestRecord.timestamp);
        const diffMinutes = diffMs / (1000 * 60);

        const isActive = diffMinutes <= THRESHOLD_MINUTES;
        statuses.push({
          deviceId: id,
          status: isActive ? "üü¢ Online" : "üî¥ Offline",
          lastSeen: latestRecord.timestamp,
        });
      }
      else {
        statuses.push({
          deviceId: id,
          status: "üî¥ Offline",
          lastSeen: null,
        });
      }
    }
    console.log("üìä K·∫øt qu·∫£ tr·∫°ng th√°i:", statuses);

    res.json(statuses);
  } catch (err) {
    console.error("L·ªói truy v·∫•n tr·∫°ng th√°i thi·∫øt b·ªã:", err);
    res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
  }
});

// C·∫≠p nh·∫≠t th√¥ng tin site (c√≥ th·ªÉ s·ª≠a t√™n, danh s√°ch device)
router.put("/update/:id", async (req, res) => {
  const { id } = req.params;
  const { name, devices } = req.body;
  try {
    await Site.findByIdAndUpdate(id, { name, devices });
    res.json({ message: "C·∫≠p nh·∫≠t site th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t site" });
  }
});

// X√≥a site
router.delete("/delete/:id", async (req, res) => {
  const { id } = req.params;
  try {
    await Site.findByIdAndDelete(id);
    res.json({ message: "X√≥a site th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ error: "L·ªói x√≥a site" });
  }
});

module.exports = router;
